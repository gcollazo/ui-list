<h3>Component::<code>ui-list</code></h3>

<h4>Overview</h4>
<div class="row">
    <desc>
        The <code>ui-list</code> is the default list container. It does nothing more than list items with very basic styling for the container itself, 
        it's main function is to proxy properties into the items it contains as well manage actions coming out of them.
    </desc>
</div>

<h4>Example</h4>

<div class="examples">
    <table class="row">
        <tr>
            <td class="col-xs-12 col-sm-4 text-center align-middle">
                {{#if enableStaticChooser}}
                  {{ui-list items=items map=map size=size mood=mood style=style}}
                {{else}}
                  {{ui-list items=items map=map size=size mood=sillyLogic style=style}}
                {{/if}}
            </td>
            <td class="hidden-xs col-sm-8">
                <heading>CONTAINER PROPERTIES</heading>
                
                {{#code-block language="js"}}
items: [
  {foo: "Groceries", bar: "hungry, hungry, hippo", icon: "cutlery"},
  {foo: "Hospital", bar: "visit sick uncle Joe", icon: "ambulance"},
  {foo: "Pub", bar: "it's time for some suds", icon: "beer"},
  {foo: "Took Cab", bar: "took a cab, drinking not driving", icon: "cab"},
  {foo: "Had Coffee", bar: "need to chill out after that beer", icon: "coffee"}
],
map: {
  title: 'foo',
  subHeading: 'bar'
},
sillyLogic: function(context) {
  let things = [
    {type: goodThings, value: ['Pub']},
    {type: badThings, value: ['Hospital']},
    {type: dubiousThings, value: ['Groceries','Had Coffee']}
  ];
  let moodRing = { 
    goodThings: 'success', badThings: 'error', dubiousThings: 'warning' 
  };
  
  things.forEach( thing => {
    if(context.title && Ember.A(thing.value).contains(context.title)) {
      return moodRing[thing.type];
    }
  });
  
  return null;
},
                {{/code-block}}
                
                <heading>HANDLEBARS TEMPLATE</heading>
                
                {{#code-block language="handlebars" poll=100}}
\{{ui-list 
  items=items 
  map=map
  {{#if enableStaticChooser}}mood='{{mood}}'{{else}}mood=sillyLogic{{/if}}
  size="{{size}}"
  style="{{style}}"
}}
                {{/code-block}}
                
            </td>
        </tr>
    </table>
</div>
<p>&nbsp;</p>
<configuration>
    <icon>{{icon-cog size="2x"}}</icon>
    <config>
        <columns>
            <column>
                List Size: <br/>
                {{ui-button-radio choices='tiny,small,default,large,huge' selected=size size='small' defaultValue='default'}}<br/>
            </column>
            <column>
                Mood: <br/>
                {{ui-button-radio choices='static,sillyLogic' selected=moodStrategy size='small'}}<br/>
                {{#if enableStaticChooser}}
                Static Moods:<br/>
                  {{ui-button-radio choices='default,success,info,warning,error' selected=mood disable=disableStaticChooser size='small' defaultValue='default'}}
                {{/if}}
             </column>
            <column>
                Skin / Style Family:<br/>        
                {{ui-button-radio choices='default,plus,flat' selected=style size='small' stretch=true}}<br/>
            </column>
        </columns>
    </config>
</configuration>

<desc>
    <strong>Notes on ui-list example:</strong>
    <ul>
        <li>
            <strong>Content</strong> of any sort -- icons, titles, subHeadings, badges, etc. -- will be proxied into the item components through one of two means:
            <ol>
                <li>
                    Dynamically: 
                    <ul>
                        <li>If the incoming properties are already named appropriately (aka, the item property names) then you're all set</li>
                        <li>If not then use the <code>map</code> property to translate your incoming property names to the item properties (e.g, "icon", "badgeLeft", etc.)</li>
                        <li>
                            Of course you only need to map those properties which are in need of mapping. For instance, the above example maps 
                            <em>title</em> and <em>subHeading</em> but since <em>icon</em> is already correctly named it leaves it as is.
                        </li>
                    </ul>
                </li>
                <li>
                    Statically: 
                    <ul>
                        <li>
                            a static mapping for all items can be set directly by stating the value as a direct parameter. 
                        </li>
                        <li>
                            For instance if you want all icons to be a "beer" (and why wouldn't you) then this achieved 
                            with <code>\{{ui-list icon='beer'}}</code>
                        </li>
                        <li>
                            Because a static mapping overrides a dynamic one, you can also set a property to <em>false</em> to ensure it is suppressed. 
                        </li>
                    </ul>
                </li>
                
            </ol>
        </li>
        <li>
            <strong>Vertical margins</strong> between items are determined by size but also modified by the 
            <code>.compressed</code> css class which is proxied
            by the property by the same name on the <code>ui-list</code> component.
        </li>
    </ul>
    
</desc>

