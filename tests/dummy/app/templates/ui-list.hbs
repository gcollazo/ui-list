<h3>Component::<code>ui-list</code></h3>

<h4>Overview</h4>
<div class="row">
    <desc>
        The <code>ui-list</code> is the default list container. It does nothing more than list items with very basic styling for the container itself, 
        it's main function is to proxy properties into the items it contains as well manage actions coming out of them.
    </desc>
    <desc>
      To understand <code>ui-list</code> as either an inline or block component you must understand it's parameters in terms of their scope:
    </desc>
    <desc>
      <table class="row">
        <tr>
          <td class="col-xs-12 col-sm-6">
            <heading>LIST SCOPE</heading>
          </td>
          <td class="col-xs-12 col-sm-6">
            <heading>ITEM SCOPE</heading>
          </td>
        </tr>
        {{! ----------------------------------------------------------- }}
        <tr>
          <td style="vertical-align:top">
            <ul>
              <li>
                <code>items</code> 
                <ul>
                  <li>this is the array/list data payload which will then be distributed to each item</li>
                </ul>
              </li>
              <li>
                <code>map</code> 
                <ul>
                  <li>
                    if the properties on the input object don't match up to the pane-areas the mapper will do a simple property mapping
                  </li>
                  <li>see how <code>foo</code> and <code>bar</code> are mapped to <em>title</em> and <em>subHeading</em> panes in the example below</li>
                </ul>
              </li>
              <li>
                <code>size</code> 
                <ul>
                  <li>the size of items should always be consistent by item</li>
                  <li>this doesn't prevent the item -- either through a style family or otherwise -- in adjusting its size</li>
                  <li>
                    as a "for instance" it could be imagined that an <em>active</em> item might be bigger, this is fine but the 'size' 
                    property would remain static and instead provide a macro-level control on size/scale to any underlying effects
                  </li>
                </ul>
              </li>
              <li>
                <code>style</code> 
                <ul>
                  <li>all items should maintain the same style family</li>
                </ul>
              </li>
              <li>
                <code>type</code> 
                <ul>
                  <li>specifies the component-type of the items; all items must be of same type</li>
                  <li>
                    for instance, if you set <em>type</em> to <strong>tabular</strong> then each item would be of component 
                    type <code>ui-tabular-item</code>
                  </li>
                  <li>by default type is null and therefore the item component used is <code>ui-item</code></li>
                </ul>
              </li>
              <li>
                <code>actionChoices</code> 
                <ul>
                  <li>specifies an array of actions that each item will provide</li>
                  <li>
                    all items should expose the same actions but have the right to display or hide them appropriate to their specific implementation
                  </li>
                  <li>the base <code>ui-item</code> does not support actions</li>
                </ul>
              </li>
            </ul>
          </td>
          {{! ----------------------------------------------------------- }}
          <td class="col-xs-4" style="vertical-align:top">
            <ul>
              <li><code>mood</code>
                <ul>
                  <li>often used to visually segment items based on some sort of business logic</li>
                  <li>yes it could be set statically, but typically it be run through a business rule</li>
                  <li>in the example below notice how mood can be mapped to the <strong>sillyLogic</strong> function</li>
                </ul>
              </li>
              <li>All <strong>AspectPanes</strong>
                <ul>
                  <li>each Aspect (e.g., icon, image, title), or </li>
                  <li>each Aspect with an explicit Pane (e.g., iconRight, badgeLeft, etc.)</li>
                </ul>
              </li>
            </ul>
          </td>
        </tr>
      </table>

      <note>
          <strong>Note:</strong> 
          Currently the only <em>type</em> implemented is the basic <strong>ui-item</strong>. Also, the concept of <em>actions</em> are not implemented 
          in the basic item type. 
      </note>

    </desc>
</div>
{{! ------------------------------------------------------------------------------------------------------------------------- }}
<h4>Example</h4>

<div class="examples">
    <table class="row">
        <tr>
            <td class="col-xs-12 col-sm-4 text-center align-top">
              <p>&nbsp;</p>
                {{#if enableStaticChooser}}
                  {{ui-list 
                    items=items 
                    filter=listFilter
                    map=map 
                    size=size 
                    mood=mood 
                    style=style 
                    defaultIcon=defaultIcon 
                    compressed=compressed 
                    sort=sortBy 
                    sortAscending=sortAscending
                  }}
                {{else}}
                  {{ui-list 
                    items=items 
                    filter=listFilter
                    map=map 
                    size=size 
                    mood=sillyLogic 
                    style=style 
                    defaultIcon=defaultIcon 
                    compressed=compressed 
                    sort=sortBy  
                    sortAscending=sortAscending
                  }}
                {{/if}}
            </td>
{{! ------------------------------------------------------------------------------------------------------------------------- }}
            <td class="hidden-xs col-sm-8">
                <heading>CONTAINER PROPERTIES</heading>
                
                {{#code-block language="js"}}
items: [
  {foo: "Groceries", bar: "hungry, hungry, hippo", icon: "cutlery", badge: 6},
  {foo: "Hospital", bar: "visit sick uncle Joe", icon: "ambulance", badge: 1},
  {foo: "Pub", bar: "it's time for some suds", icon: "beer"},
  {foo: "Took Cab", bar: "took a cab, drinking not driving", icon: "cab"},
  {foo: "Had Coffee", bar: "need to chill out after that beer", icon: "coffee"}
],
map: {
  title: 'foo',
  subHeading: 'bar'
},
                {{/code-block}}
                {{code-reference ref=sillyLogic}}
                
                <heading>HANDLEBARS TEMPLATE</heading>
                
                {{#code-block language="handlebars" poll=100}}
\{{ui-list 
  items=items 
  map=map
  {{#if enableStaticChooser}}mood='{{mood}}'{{else}}mood=sillyLogic{{/if}}
  size="{{size}}"
  style="{{style}}"{{#if compressed}}
  compressed=true{{/if}}{{#if sortBy}}
  sort="{{sortBy}}" {{else}}
  {{/if}}
  
}} 
                {{/code-block}}
                
            </td>
        </tr>
    </table>
</div>
{{! ------------------------------------------------------------------------------------------------------------------------- }}
<p>&nbsp;</p>
<configuration>
    <icon>{{icon-cog size="2x"}}</icon>
    <config>
        <columns>
            <column>
                List Size: <br/>
                {{ui-button-radio choices='tiny,small,default,large,huge' selected=size size='small' defaultValue='default'}}<br/>
                compressed: {{ui-toggle-button value=compressed on='compressed' off='normal' size='small'}}<br/>
                Filter: <br/>
                {{ui-toggle-button value=isFiltered on='Only where Badge exists' off='No Filter' defaultValue=false}}
            </column>
            <column>
                Mood: <br/>
                {{ui-button-radio choices='static,sillyLogic' selected=moodStrategy size='small' stretch=true}}<br/>
                {{#if enableStaticChooser}}
                Static Moods:<br/>
                  {{ui-button-radio choices='default,success,info,warning,error' selected=mood disable=disableStaticChooser size='small' defaultValue='default'}}
                {{/if}}
             </column>
            <column>
                Skin / Style Family:<br/>        
                {{ui-button-radio choices='default,plus,flat' selected=style size='small' stretch=true}}<br/>
                Sort By: 
                {{ui-toggle-button value=sortAscending toggleEffect='tada' onIcon='chevron-down' offIcon='chevron-up' on='' off=''}}<br/>        
                {{ui-button-radio choices=sortOrders selected=sortBy size='small' stretch=true}}<br/>
            </column>
        </columns>
    </config>
</configuration>
{{! ------------------------------------------------------------------------------------------------------------------------- }}

<desc>
    <strong>Notes on ui-list example:</strong>
    <ul>
        <li>
            <strong>Content</strong> of any sort -- icons, titles, subHeadings, badges, etc. -- will be proxied into the item components through one of two means:
            <ol>
                <li>
                    Dynamically: 
                    <ul>
                        <li>If the incoming properties are already named appropriately (aka, the item property names) then you're all set</li>
                        <li>If not then use the <code>map</code> property to translate your incoming property names to the item properties (e.g, "icon", "badgeLeft", etc.)</li>
                        <li>
                            Of course you only need to map those properties which are in need of mapping. For instance, the above example maps 
                            <em>title</em> and <em>subHeading</em> but since <em>icon</em> is already correctly named it leaves it as is.
                        </li>
                    </ul>
                </li>
                <li>
                    Statically: 
                    <ul>
                        <li>
                            a static mapping for all items can be set directly by stating the value as a direct parameter. 
                        </li>
                        <li>
                            For instance if you want all icons to be a "beer" (and why wouldn't you) then this achieved 
                            with <code>\{{ui-list icon='beer'}}</code>
                        </li>
                        <li>
                            Because a static mapping overrides a dynamic one, you can also set a property to <em>false</em> to ensure it is suppressed. 
                        </li>
                    </ul>
                </li>
                
            </ol>
        </li>
        <li>
            <strong>Vertical margins</strong> between items are determined by size but also modified by the 
            <code>.compressed</code> css class which is proxied
            by the property by the same name on the <code>ui-list</code> component.
        </li>
    </ul>
</desc>


<h4>Ember Data</h4>
<desc>
  Considering a lot of data lists come from Ember-Data the example below loads all the data from above into a model called "Activity" and then works in precisely 
  the same way. Check out the data in the Ember Inspector and play around with it to see it update:
</desc>

<examples>
  <widget class='wide'>
    {{#if enableStaticChooser}}
      {{ui-list items=model.content map=map size=size mood=mood style=style defaultIcon=defaultIcon  compressed=compressed sort=sortBy filter=filterList sortAscending=sortAscending}}
    {{else}}
      {{ui-list items=model.content map=map size=size mood=sillyLogic style=style defaultIcon=defaultIcon  compressed=compressed sort=sortBy filter=filterList sortAscending=sortAscending}}
    {{/if}}
  </widget>
  <sourcecode>
  {{#code-block language="handlebars" poll=100}}





\{{ui-list
  items=model.content
  map=map
  {{#if enableStaticChooser}}mood='{{mood}}'{{else}}mood=sillyLogic{{/if}}
  size="{{size}}"
  style="{{style}}"{{#if compressed}}
  compressed=true{{/if}}
}}






    {{/code-block}}
  </sourcecode>
</examples>

