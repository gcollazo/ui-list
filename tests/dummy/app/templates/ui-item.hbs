<h3>Component::<code>ui-item</code></h3>

<h4>Overview</h4>
<div class="row">
    <desc>
        The <code>ui-item</code> is the default list item. Like any item it responds to common/shared principles of:
        <ul>
          <li>Layout and property definition of <code>aspects</code> and <code>panes</code></li>
          <li>The relative <code>size</code> of each item</li>
          <li>The <code>style</code> family it belongs to</li>
        </ul>
        
        This control does not have:
        <ul>
          <li>
            This being the most basic item-type it only responds with click action type (aka, no fancy slide out actions or other visual effects for
            these items). Check out 'actionable items' for that.             
          </li>
        </ul>
    </desc>
</div>

<h4>Basic Example</h4>
{{! ----------------------------------------------------------- }}
<examples>
    <widget>
        {{ui-item icon='envelope' title='Went Running' badgeRight=4}}
    </widget>
    <sourcecode>
        {{#code-block language="handlebars"}}
\{{ui-item icon='envelope' title='Went Running' badgeRight=4}}
        {{/code-block}}         
    </sourcecode>
</examples>
{{! ----------------------------------------------------------- }}
<desc>
    There are few things to note in the basic example above but they all map back to the idea of an "aspect". All the parameters in this basic example
    are just setting the primary properties of various <em>aspects</em>. To be "fully qualified" an aspect must be placed into a "pane". A pane is an <em>area</em> 
    of the item and with the basic <code>ui-item</code> component the only panes are "left", "right", and "center".
</desc>
<desc>
  With all this talk of fully qualified aspects needing a pane you might be rightly unsure why only badge is being explict about which pane it should be 
  placed in. For "badge" it is being placed to the "right" pane. What about the other two?
    <ul>
        <li>
            The <code>icon</code> property is an alias to the <code>iconLeft</code> property. The alias is setup  
            because its very common to have an icon in this pane.
        </li>
        <li>
            Similarly the <code>title</code> property is assumed to refer to the <code>titleCenter</code> property. 
        </li>
        <li>
            The <code>badgeRight</code> property is is our shining example of a fully qualified aspect/pane pair. Truth be told, we could have just stated
            this as <code>badge</code> because there is an alias for the badge that places it into the right pane by default.
        </li>
    </ul>
</desc>

<h4>Advanced Example: Mapping, Size, Skin, and Mood</h4>
{{! ----------------------------------------------------------- }}
<examples>
    <widget class="wide">
        <heading>With individual property mappers</heading>
        {{ui-item 
					icon=toggledIcon 
					foo='Went Running' 
					mapTitle='foo' 
					bar=toggledSubHeading 
					mapSubHeading="bar"
					badge=toggledBadge 
					size=size 
					disabled=isDisabled 
					style=style 
					mood=mood
				}}
        <br/>
        
        <heading>With <code>map</code> property</heading>
        {{ui-item 
					icon=toggledIcon 
					foo='Went Running' 
					bar=toggledSubHeading 
          map=mapper
					badge=toggledBadge 
					size=size 
					disabled=isDisabled 
					style=style 
					mood=mood
				}}
        
    </widget>
    <sourcecode>
        {{#code-block language="handlebars" poll=150}}
\{{ui-item {{#if toggledIcon}}icon='{{toggledIcon}}'{{/if}}
    foo='Went Running' {{#if toggledSubHeading}}
    mapTitle='foo'
    bar='{{toggledSubHeading}}'
    mapSubHeading='bar' {{/if}}
    {{#if toggledBadge}}badge={{toggledBadge}}
    {{/if}}style='{{style}}'
}}

{{! using a singular map hash }}
\{{ui-item {{#if toggledIcon}}icon='{{toggledIcon}}'{{/if}}
    foo='Went Running' {{#if toggledSubHeading}}
    bar='{{toggledSubHeading}}'
    map=mapper {{/if}}
    {{#if toggledBadge}}badge={{toggledBadge}}
    {{/if}}style='{{style}}'
}}
        {{/code-block}}
        {{#code-block language='js'}}
// where ... 
mapper: {
  title: 'foo',
  subHeading: 'bar'
}        
        {{/code-block}}
    </sourcecode>
</examples>
{{! ----------------------------------------------------------- }}
<configuration>
    <icon>{{icon-cog size="2x"}}</icon>
    <config>
        <columns>
            <column>
                Item Size: <br/>
                {{ui-button-radio choices='tiny,small,default,large,huge' selected=size size='small' defaultValue='default'}}<br/>
                Mood: <br/>
                {{ui-button-radio choices='default,success,info,warning,error' selected=mood size='small' defaultValue='default'}}<br/>
            </column>
            <column>
                <div class="row">
                    Toggles<br/>                  
                    <div class="col-xs-6">
                        {{ui-toggle-button value=showSubHeading size='small'}} - SUB HEAD
                        <p>&nbsp;</p>                      
                        {{ui-toggle-button value=isDisabled size='small'}} - DISABLED <br/>
                    </div>
                    <div class="col-xs-6">
                        {{ui-toggle-button value=showBadge size='small'}} - BADGE   <br/>
                        <p>&nbsp;</p>                      
                        {{ui-toggle-button value=showIcon size='small'}} - ICON<br/>
                    </div>
                </div>
            </column>
            <column>
                Skin / Style Family:<br/>        
                {{ui-button-radio choices='default,plus,flat' selected=style size='small' stretch=true}}<br/>
            </column>
        </columns>
    </config>
</configuration>
{{! ----------------------------------------------------------- }}
<desc>
    Things to note:
    <ul>
      <li>
        Mapping:
        <ul>
          <li>The properties <code>foo</code> and <code>bar</code> are just random property names that came from the input, they have no meaning to <strong>ui-input</strong></li>
          <li>These properties, however, can be mapped to aspects or aspect/pane property names which DO have meaning</li>
          <li>This is achieved by either adding a mapping property 1:1 for each mapping or including a singular <code>map</code> property which provides a hash of mappings.</li>
          <li>Both are illustrated above in the example</li>
        </ul>
      </li>
        <li>there is a CSS property <code>two-lined-message</code> which is turned on when text elements fill two line items (e.g., both 'title' and 'sub-heading' are set); this allows the size of the left most icon to be adjusted based on this property</li>
        <li>left padding is increased for center pane if there is no content in the left-pane, this leverages the <code>with-left</code> and <code>no-left</code> CSS properties</li>
        <li>you can use either <code>style</code> or <code>skin</code> properties for setting the skin/style family as they are aliased to the same root</li>
    </ul>
</desc>